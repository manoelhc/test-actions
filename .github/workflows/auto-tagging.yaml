name: Create Release

on:
  pull_request:
    types: [opened, synchronize, closed, reopened]
    branches:
      - main
      - feat/*
      - fix/*
      - hotfix/*
      - ci/*
      - chore/*
      - release/*
env:
    BUMP_PATCH: ^(fix|hotfix|ci)+(\([-A-Z0-9a-z]+\))?:(.*)+$|^chore\(deps\):(.*)+$|^chore\(bump\):(.*)+$|^\[Snyk\](.*)+$
    BUMP_MINOR: ^(feat|chore)+(\([-A-Z0-9a-z]+\))?:(.*)+$
    BUMP_MAJOR: ^((feat|chore|fix)+(\([-A-Z0-9a-z]+\)?)!|BREAKING CHANGE):(.*)+$
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{ github.repository }}
jobs:
  tag:
    permissions: write-all
    runs-on: ubuntu-latest
    outputs:
      image_version: ${{ steps.apply_version.outputs.new_version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: install Semver
      run: |
        cargo install semver-cli
    - name: Get changes attributes
      id: versions
      env:
        PR_TITLE: "${{ github.event.pull_request.title }}"
      run: |
       current_version=$(git describe --tags $(git rev-list --tags='v[0-9]+.[0-9]+.[0-9]+' --max-count=1 || true)|cut -dv -f2)
       if [[ -z $current_version  ]]; then
         current_version=0.0.0
       fi
       echo "current_version=$current_version" >> "$GITHUB_OUTPUT"

       patch=$(eval '[[ "$PR_TITLE" =~ $BUMP_PATCH ]] && semver-cli ${current_version} --increment patch || true')
       minor=$(eval '[[ "$PR_TITLE" =~ $BUMP_MINOR ]] && semver-cli ${current_version} --increment minor || true')
       major=$(eval '[[ "$PR_TITLE" =~ $BUMP_MAJOR ]] && semver-cli ${current_version} --increment major || true')

       echo "patch=${patch}" >> "$GITHUB_OUTPUT"
       echo "minor=${minor}" >> "$GITHUB_OUTPUT"
       echo "major=${major}" >> "$GITHUB_OUTPUT"

       next_version=${patch:-${minor:-${major}}}

       if [[ -z $next_version ]]; then
         echo "No version was generated due to PR title not compatible with Conventional Commits."
         echo "PR Title: $PR_TITLE"
         exit 1
       fi

       echo "next_version=${next_version}" >> "$GITHUB_OUTPUT"

    - uses: mshick/add-pr-comment@v2
      with:
         message: |
           No tag was generated due to PR title not compatible with Conventional Commits.

    - name: Tag new version
      id: apply_version
      env:
        VERSION: "${{ steps.versions.outputs.next_version }}"
        PR_NUMBER: ${{ github.event.pull_request.number }}
        PR_MERGED: ${{ github.event.pull_request.merged }}
        PR_ACTION: ${{ github.event.action }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git fetch --tags origin

        version=v${VERSION}
        pr_version=pr${PR_NUMBER}
        pr_tag_exists=$(git tag -l | grep -F ${version}-${pr_version} || true)
        all_pr_tags=$(git tag -l | egrep ${pr_version}\$ || true)

        if [[ -n "${pr_tag_exists}" ]]; then
          echo "The project already has the tag ${pr_tag_exists}"
        fi

        # If event is closed
        if [[ $PR_ACTION = "closed" ]] && [[ $PR_MERGED = true ]]; then
          git checkout main
          git pull
          git tag $version
          git push origin $version
          new_version=${version}
          for tag in ${all_pr_tags}; do
            git push --delete origin $tag
            old_version=$tag
          done
        elif [[ $PR_ACTION = "closed" ]] && [[ $PR_MERGED = false ]] && [[ -n "${pr_tag_exists}" ]]; then
          for tag in ${all_pr_tags}; do
            git push --delete origin $tag
            old_version=$tag
          done
        else
          if [[ -n "${pr_tag_exists}" ]]; then
            git tag -d ${version}-${pr_version}
            for tag in ${all_pr_tags}; do
              git push --delete origin $tag
              old_version=$tag
            done
          fi
          git tag ${version}-${pr_version} $(git rev-parse --short "$GITHUB_SHA")
          new_version=${version}-${pr_version}
          git push origin ${version}-${pr_version}
        fi

        echo "new_version=${new_version}" >> "$GITHUB_OUTPUT"
        echo "old_version=${old_version}" >> "$GITHUB_OUTPUT"
        echo "new_branch=$(git rev-parse --abbrev-ref HEAD)" >> "$GITHUB_OUTPUT"
        echo "new_hash=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

    - uses: mshick/add-pr-comment@v2
      if: startsWith(steps.apply_version.outputs.new_version, 'v')
      with:
        message: |
          Tag `${{ steps.apply_version.outputs.old_version }}` removed.

    - uses: mshick/add-pr-comment@v2
      if: startsWith(steps.apply_version.outputs.new_version, 'v')
      with:
        message: |
          Tag `${{ steps.apply_version.outputs.new_version }}` (branch: `${{ steps.apply_version.outputs.new_branch }}`, SHA: `${{ steps.apply_version.outputs.new_hash }}`) Added.

    - name: Create Release
      if: github.event.pull_request.merged == true
      uses: softprops/action-gh-release@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        generate_release_notes: true
        tag_name: "${{ steps.apply_version.outputs.new_version }}"

    # Remove the PR tag if the PR is closed
    - name: Remove PR tag
      if: github.event.pull_request.merged == true && github.event.pull_request.number != null
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        VERSION: "${{ steps.versions.outputs.next_version }}"
      run: |
        git fetch --tags origin
        # Check if the tag is already deleted
        tag_exists=$(git tag -l | grep -F ${VERSION}-${PR_NUMBER} || true)
        if [[ -z "${tag_exists}" ]]; then
          echo "The tag ${VERSION}-${PR_NUMBER} has already been deleted."
        else
          git tag -d ${VERSION}-${PR_NUMBER}
          git push --delete origin ${VERSION}-${PR_NUMBER}
        fi

  push-image:
    permissions: write-all
    runs-on: ubuntu-latest
    needs: tag
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5.5.1
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Build and push Docker image
      id: push
      uses: docker/build-push-action@v5.3.0
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}:${{ needs.tag.outputs.image_version }}
        labels: ${{ steps.meta.outputs.labels }}

    # Remove the PR tag if the PR is closed
    - name: Remove Image tag with PR from registry
      if: github.event.pull_request.merged == true && github.event.pull_request.number != null
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
        VERSION: "${{ steps.versions.outputs.next_version }}"
        TAG: ${{ steps.meta.outputs.tags }}
      run: |
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-${PR_NUMBER}
        docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-${PR_NUMBER}
        docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${TAG}-${PR_NUMBER}
